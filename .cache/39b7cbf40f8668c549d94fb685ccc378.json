{"dependencies":[{"name":"lodash/assignIn","loc":{"line":18,"column":22}},{"name":"lodash/isArray","loc":{"line":20,"column":21}},{"name":"lodash/isString","loc":{"line":22,"column":22}},{"name":"lodash/isFunction","loc":{"line":24,"column":24}},{"name":"lodash/isNumber","loc":{"line":26,"column":22}},{"name":"lodash/isObject","loc":{"line":28,"column":22}},{"name":"lodash/size","loc":{"line":30,"column":18}},{"name":"lodash/template","loc":{"line":32,"column":22}},{"name":"clone","loc":{"line":34,"column":18}},{"name":"events","loc":{"line":36,"column":25}}],"generated":{"js":"/*\n * node-cache 4.1.0 ( 2016-12-21 )\n * https://github.com/mpneuried/nodecache\n *\n * Released under the MIT license\n * https://github.com/mpneuried/nodecache/blob/master/LICENSE\n *\n * Maintained by M. Peter ( https://github.com/mpneuried )\n*/\n(function() {\n  var EventEmitter, NodeCache, _assignIn, _isArray, _isFunction, _isNumber, _isObject, _isString, _size, _template, clone,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty,\n    slice = [].slice,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  _assignIn = require(\"lodash/assignIn\");\n\n  _isArray = require(\"lodash/isArray\");\n\n  _isString = require(\"lodash/isString\");\n\n  _isFunction = require(\"lodash/isFunction\");\n\n  _isNumber = require(\"lodash/isNumber\");\n\n  _isObject = require(\"lodash/isObject\");\n\n  _size = require(\"lodash/size\");\n\n  _template = require(\"lodash/template\");\n\n  clone = require(\"clone\");\n\n  EventEmitter = require('events').EventEmitter;\n\n  module.exports = NodeCache = (function(superClass) {\n    extend(NodeCache, superClass);\n\n    function NodeCache(options) {\n      this.options = options != null ? options : {};\n      this._initErrors = bind(this._initErrors, this);\n      this._error = bind(this._error, this);\n      this._getValLength = bind(this._getValLength, this);\n      this._wrap = bind(this._wrap, this);\n      this._isInvalidKey = bind(this._isInvalidKey, this);\n      this._check = bind(this._check, this);\n      this._checkData = bind(this._checkData, this);\n      this.close = bind(this.close, this);\n      this.flushAll = bind(this.flushAll, this);\n      this.getStats = bind(this.getStats, this);\n      this.keys = bind(this.keys, this);\n      this.getTtl = bind(this.getTtl, this);\n      this.ttl = bind(this.ttl, this);\n      this.del = bind(this.del, this);\n      this.set = bind(this.set, this);\n      this.mget = bind(this.mget, this);\n      this.get = bind(this.get, this);\n      this._initErrors();\n      this.data = {};\n      this.options = _assignIn({\n        forceString: false,\n        objectValueSize: 80,\n        arrayValueSize: 40,\n        stdTTL: 0,\n        checkperiod: 600,\n        useClones: true,\n        errorOnMissing: false\n      }, this.options);\n      this.stats = {\n        hits: 0,\n        misses: 0,\n        keys: 0,\n        ksize: 0,\n        vsize: 0\n      };\n      this.validKeyTypes = [\"string\", \"number\"];\n      this._checkData();\n      return;\n    }\n\n    NodeCache.prototype.get = function(key, cb, errorOnMissing) {\n      var _err, _ret, err;\n      if (typeof cb === \"boolean\" && arguments.length === 2) {\n        errorOnMissing = cb;\n        cb = void 0;\n      }\n      if ((err = this._isInvalidKey(key)) != null) {\n        if (cb != null) {\n          cb(err);\n          return;\n        } else {\n          throw err;\n        }\n      }\n      if ((this.data[key] != null) && this._check(key, this.data[key])) {\n        this.stats.hits++;\n        _ret = this._unwrap(this.data[key]);\n        if (cb != null) {\n          cb(null, _ret);\n        }\n        return _ret;\n      } else {\n        this.stats.misses++;\n        if (this.options.errorOnMissing || errorOnMissing) {\n          _err = this._error(\"ENOTFOUND\", {\n            key: key\n          }, cb);\n          if (_err != null) {\n            throw _err;\n          }\n          return;\n        } else {\n          if (cb != null) {\n            cb(null, void 0);\n          }\n        }\n        return void 0;\n      }\n    };\n\n    NodeCache.prototype.mget = function(keys, cb) {\n      var _err, err, i, key, len, oRet;\n      if (!_isArray(keys)) {\n        _err = this._error(\"EKEYSTYPE\");\n        if (cb != null) {\n          cb(_err);\n        }\n        return _err;\n      }\n      oRet = {};\n      for (i = 0, len = keys.length; i < len; i++) {\n        key = keys[i];\n        if ((err = this._isInvalidKey(key)) != null) {\n          if (cb != null) {\n            cb(err);\n            return;\n          } else {\n            throw err;\n          }\n        }\n        if ((this.data[key] != null) && this._check(key, this.data[key])) {\n          this.stats.hits++;\n          oRet[key] = this._unwrap(this.data[key]);\n        } else {\n          this.stats.misses++;\n        }\n      }\n      if (cb != null) {\n        cb(null, oRet);\n      }\n      return oRet;\n    };\n\n    NodeCache.prototype.set = function(key, value, ttl, cb) {\n      var err, existent;\n      if (this.options.forceString && !_isString(value)) {\n        value = JSON.stringify(value);\n      }\n      if (arguments.length === 3 && _isFunction(ttl)) {\n        cb = ttl;\n        ttl = this.options.stdTTL;\n      }\n      if ((err = this._isInvalidKey(key)) != null) {\n        if (cb != null) {\n          cb(err);\n          return;\n        } else {\n          throw err;\n        }\n      }\n      existent = false;\n      if (this.data[key]) {\n        existent = true;\n        this.stats.vsize -= this._getValLength(this._unwrap(this.data[key], false));\n      }\n      this.data[key] = this._wrap(value, ttl);\n      this.stats.vsize += this._getValLength(value);\n      if (!existent) {\n        this.stats.ksize += this._getKeyLength(key);\n        this.stats.keys++;\n      }\n      this.emit(\"set\", key, value);\n      if (cb != null) {\n        cb(null, true);\n      }\n      return true;\n    };\n\n    NodeCache.prototype.del = function(keys, cb) {\n      var delCount, err, i, key, len, oldVal;\n      if (!_isArray(keys)) {\n        keys = [keys];\n      }\n      delCount = 0;\n      for (i = 0, len = keys.length; i < len; i++) {\n        key = keys[i];\n        if ((err = this._isInvalidKey(key)) != null) {\n          if (cb != null) {\n            cb(err);\n            return;\n          } else {\n            throw err;\n          }\n        }\n        if (this.data[key] != null) {\n          this.stats.vsize -= this._getValLength(this._unwrap(this.data[key], false));\n          this.stats.ksize -= this._getKeyLength(key);\n          this.stats.keys--;\n          delCount++;\n          oldVal = this.data[key];\n          delete this.data[key];\n          this.emit(\"del\", key, oldVal.v);\n        } else {\n          this.stats.misses++;\n        }\n      }\n      if (cb != null) {\n        cb(null, delCount);\n      }\n      return delCount;\n    };\n\n    NodeCache.prototype.ttl = function() {\n      var arg, args, cb, err, i, key, len, ttl;\n      key = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n      for (i = 0, len = args.length; i < len; i++) {\n        arg = args[i];\n        switch (typeof arg) {\n          case \"number\":\n            ttl = arg;\n            break;\n          case \"function\":\n            cb = arg;\n        }\n      }\n      ttl || (ttl = this.options.stdTTL);\n      if (!key) {\n        if (cb != null) {\n          cb(null, false);\n        }\n        return false;\n      }\n      if ((err = this._isInvalidKey(key)) != null) {\n        if (cb != null) {\n          cb(err);\n          return;\n        } else {\n          throw err;\n        }\n      }\n      if ((this.data[key] != null) && this._check(key, this.data[key])) {\n        if (ttl >= 0) {\n          this.data[key] = this._wrap(this.data[key].v, ttl, false);\n        } else {\n          this.del(key);\n        }\n        if (cb != null) {\n          cb(null, true);\n        }\n        return true;\n      } else {\n        if (cb != null) {\n          cb(null, false);\n        }\n        return false;\n      }\n    };\n\n    NodeCache.prototype.getTtl = function(key, cb) {\n      var _ttl, err;\n      if (!key) {\n        if (cb != null) {\n          cb(null, void 0);\n        }\n        return void 0;\n      }\n      if ((err = this._isInvalidKey(key)) != null) {\n        if (cb != null) {\n          cb(err);\n          return;\n        } else {\n          throw err;\n        }\n      }\n      if ((this.data[key] != null) && this._check(key, this.data[key])) {\n        _ttl = this.data[key].t;\n        if (cb != null) {\n          cb(null, _ttl);\n        }\n        return _ttl;\n      } else {\n        if (cb != null) {\n          cb(null, void 0);\n        }\n        return void 0;\n      }\n    };\n\n    NodeCache.prototype.keys = function(cb) {\n      var _keys;\n      _keys = Object.keys(this.data);\n      if (cb != null) {\n        cb(null, _keys);\n      }\n      return _keys;\n    };\n\n    NodeCache.prototype.getStats = function() {\n      return this.stats;\n    };\n\n    NodeCache.prototype.flushAll = function(_startPeriod) {\n      if (_startPeriod == null) {\n        _startPeriod = true;\n      }\n      this.data = {};\n      this.stats = {\n        hits: 0,\n        misses: 0,\n        keys: 0,\n        ksize: 0,\n        vsize: 0\n      };\n      this._killCheckPeriod();\n      this._checkData(_startPeriod);\n      this.emit(\"flush\");\n    };\n\n    NodeCache.prototype.close = function() {\n      this._killCheckPeriod();\n    };\n\n    NodeCache.prototype._checkData = function(startPeriod) {\n      var key, ref, value;\n      if (startPeriod == null) {\n        startPeriod = true;\n      }\n      ref = this.data;\n      for (key in ref) {\n        value = ref[key];\n        this._check(key, value);\n      }\n      if (startPeriod && this.options.checkperiod > 0) {\n        this.checkTimeout = setTimeout(this._checkData, this.options.checkperiod * 1000, startPeriod);\n        if (this.checkTimeout.unref != null) {\n          this.checkTimeout.unref();\n        }\n      }\n    };\n\n    NodeCache.prototype._killCheckPeriod = function() {\n      if (this.checkTimeout != null) {\n        return clearTimeout(this.checkTimeout);\n      }\n    };\n\n    NodeCache.prototype._check = function(key, data) {\n      if (data.t !== 0 && data.t < Date.now()) {\n        this.del(key);\n        this.emit(\"expired\", key, this._unwrap(data));\n        return false;\n      } else {\n        return true;\n      }\n    };\n\n    NodeCache.prototype._isInvalidKey = function(key) {\n      var ref;\n      if (ref = typeof key, indexOf.call(this.validKeyTypes, ref) < 0) {\n        return this._error(\"EKEYTYPE\", {\n          type: typeof key\n        });\n      }\n    };\n\n    NodeCache.prototype._wrap = function(value, ttl, asClone) {\n      var livetime, now, oReturn, ttlMultiplicator;\n      if (asClone == null) {\n        asClone = true;\n      }\n      if (!this.options.useClones) {\n        asClone = false;\n      }\n      now = Date.now();\n      livetime = 0;\n      ttlMultiplicator = 1000;\n      if (ttl === 0) {\n        livetime = 0;\n      } else if (ttl) {\n        livetime = now + (ttl * ttlMultiplicator);\n      } else {\n        if (this.options.stdTTL === 0) {\n          livetime = this.options.stdTTL;\n        } else {\n          livetime = now + (this.options.stdTTL * ttlMultiplicator);\n        }\n      }\n      return oReturn = {\n        t: livetime,\n        v: asClone ? clone(value) : value\n      };\n    };\n\n    NodeCache.prototype._unwrap = function(value, asClone) {\n      if (asClone == null) {\n        asClone = true;\n      }\n      if (!this.options.useClones) {\n        asClone = false;\n      }\n      if (value.v != null) {\n        if (asClone) {\n          return clone(value.v);\n        } else {\n          return value.v;\n        }\n      }\n      return null;\n    };\n\n    NodeCache.prototype._getKeyLength = function(key) {\n      return key.length;\n    };\n\n    NodeCache.prototype._getValLength = function(value) {\n      if (_isString(value)) {\n        return value.length;\n      } else if (this.options.forceString) {\n        return JSON.stringify(value).length;\n      } else if (_isArray(value)) {\n        return this.options.arrayValueSize * value.length;\n      } else if (_isNumber(value)) {\n        return 8;\n      } else if (_isObject(value)) {\n        return this.options.objectValueSize * _size(value);\n      } else {\n        return 0;\n      }\n    };\n\n    NodeCache.prototype._error = function(type, data, cb) {\n      var error;\n      if (data == null) {\n        data = {};\n      }\n      error = new Error();\n      error.name = type;\n      error.errorcode = type;\n      error.message = this.ERRORS[type] != null ? this.ERRORS[type](data) : \"-\";\n      error.data = data;\n      if (cb && _isFunction(cb)) {\n        cb(error, null);\n      } else {\n        return error;\n      }\n    };\n\n    NodeCache.prototype._initErrors = function() {\n      var _errMsg, _errT, ref;\n      this.ERRORS = {};\n      ref = this._ERRORS;\n      for (_errT in ref) {\n        _errMsg = ref[_errT];\n        this.ERRORS[_errT] = _template(_errMsg);\n      }\n    };\n\n    NodeCache.prototype._ERRORS = {\n      \"ENOTFOUND\": \"Key `<%= key %>` not found\",\n      \"EKEYTYPE\": \"The key argument has to be of type `string` or `number`. Found: `<%= type %>`\",\n      \"EKEYSTYPE\": \"The keys argument has to be an array.\"\n    };\n\n    return NodeCache;\n\n  })(EventEmitter);\n\n}).call(this);\n"},"hash":"ecc510cbbb835be1a644bf8cc2d19ddd"}